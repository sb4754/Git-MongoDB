CORE JAVA ASSIGNMENT QUESTIONS


Basic data structure assignment

Question 1: To check given no. is armstrong or not

package p1;
import java.util.Scanner;
public class Armstrong {
    public static void main(String[] args)
    {
        int n,r,sum=0,temp;
        Scanner sc=new Scanner(System.in);
        System.out.println("enter value of n :");
        n=sc.nextInt();
        temp=n;
        while(n!=0)
        {
             r=n%10;
             sum=sum=(r*r*r);
             n=n/10;
        }
        if(sum==temp)
            System.out.println("armstrong number");
        else
            System.out.println("not armstrong number");
    }
}





Ques 2:
To find out all the armstrong no falling in the range of 100-999

import java.util.Scanner;
public class armstrong {
    public static void main(String[] args) {
    int i=100,arm;
    System.out.println("armstrong numbers between 100 to 999");
    while(i<1000) {
        arm = armstrongOrNot(i);
        if (arm == i)
            System.out.println(i);
        i++;
    }
    }
    static int armstrongOrNot(int num)
    {
        int x,a=0;
        while(num!=0)
        {
            x=num%10;
            a=a+(x*x*x);
            num/=10;
        }
        return a;
    }
}






Ques 3:
ind out the SI & CI of supplied value 

package com.company;
import java.util.Scanner;

public class SimpleCompound {
    public static void main(String args[])
    {
        double a,rate,t,sim,com;
        Scanner s=new Scanner(System.in);
        System.out.println("Enter the Amount");
        a=s.nextInt();
        System.out.println("Enter the no of years:");
        t=s.nextDouble();
        System.out.println("Enter the rate interest");
        rate=s.nextDouble();
        sim=(a*t*rate)/100;
        com=a*Math.pow(1.0+rate/100.0,t)-a;
        System.out.println("Simple Interest is:"+sim);
        System.out.println("Compound Interest:"+com);
    }
}





Ques 4:

package com.Datastructers;
import java.util.Scanner;

    public class Studentmarks {

        public static void main(String[] args) {
            int s1, s2, s3, m1, h1, c1, m2, h2, c2, m3, h3, c3, t1, t2, t3, a1, a2, a3, st1, st2, st3, sa1, sa2, sa3;
            Scanner s = new Scanner(System.in);
            System.out.println("enter first student maths marks subject marks");
            m1 = s.nextInt();
            System.out.println("enter first student history marks subject marks");
            h1 = s.nextInt();
            System.out.println("enter first student chemistry marks subject marks");
            c1 = s.nextInt();
            System.out.println("enter second student maths marks subject marks");
            m2 = s.nextInt();
            System.out.println("enter second student history marks subject marks");
            h2 = s.nextInt();
            System.out.println("enter second student chemistry marks subject marks");
            c2 = s.nextInt();
            System.out.println("enter second third maths marks subject marks");
            m3 = s.nextInt();
            System.out.println("enter second third history marks subject marks");
            h3 = s.nextInt();
            System.out.println("enter second third chemistry marks subject marks");
            c3 = s.nextInt();
            t1 = m1 + h1 + c1;
            System.out.println("first student total marks" + t1);
            t2 = m2 + h2 + c2;
            System.out.println("second student total marks" + t1);
            t3 = m3 + h3 + c3;
            System.out.println("third student total marks" + t1);
            a1 = (m1 + h1 + c1) / 3;
            System.out.println("first student average mark" + a1);
            a2 = (m2 + h2 + c2) / 3;
            System.out.println("second student average mark" + a2);
            a3 = (m3 + h3 + c3) / 3;
            System.out.println("third student average mark" + a3);
            st1 = m1 + m2 + m3;
            System.out.println("maths total marks" + st1);
            st2 = h1 + h2 + h3;
            System.out.println("history total marks" + st2);
            st3 = c1 + c2 + c3;
            System.out.println("chemistry total marks" + st1);
            sa1 = (m1 + m2 + m3);
            System.out.println("maths average marks" + sa1);
            sa2 = (h1 + h2 + h3);
            System.out.println("history average marks" + sa2);
            sa3 = (c1 + c2 + c3);
            System.out.println("chemistry average marks" + sa3);
        }
    }




Ques 5:

package com.corejava;

import java.util.Scanner;

public class Income {
    public static void main(String[] args)
    {
        double tax,Incm;
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter income ");
        Incm=sc.nextDouble();
        if(Incm<=180000)
            tax=0;
        else if(Incm<=300000)
            tax=0.1*(Incm-181000);
        else if(Incm<=500000)
            tax=(0.2*(Incm-300000))+(0.1*100000);
        else if(Incm<=1000000)
            tax=(0.3*(Incm-500000))+(0.2*200000)+(0.1*180000);
        else
            tax=(0.4*(Incm-1000000))+(0.3*500000)+(0.2*200000)+(0.1*100000);
        System.out.println("Income tax amount is "+tax);
    }
}



Ques 6:

package com.company;
import java.util.Scanner;
public class CUI {

   public static void main(String[] args) {
        if(!validateUser()) {
            System.out.println("Contact Admin");
        }
    }
    public static boolean validateUser( ) {
        boolean result=false;
        String username,password;
        Scanner sc=new Scanner(System.in);
        for(int i=0;i<3;i++) {
            System.out.println("Enter the Username");
            username=sc.nextLine();
            System.out.println("Enter the Password");
            password=sc.nextLine();



           if(username.equals("sunita")&&(password.equals("Wanda"))) {
                System.out.println("Welcome\t"+username);
                result =true;
                return result;
            }
            return result;
        }
        return result;
    }
}



Ques 7:
package com.Datastructers;
import java.util.*;
    public class Bubblesort {
        public static void main(String[] args)
        {
            int a[] = {5, 12, 14, 6, 78, 19, 1, 23, 26, 35, 37, 7, 52, 86, 47};
            Scanner s = new Scanner(System.in);
            System.out.println("enter searching value");
            int key = s.nextInt();
            for (int i = 0; i < 15; i++)
            {
                if(key==a[i])
                {

                    System.out.println(key + "is found at index" + i);
                }
            }
        }
    }





Ques 8:

package com.corejava;
public class BubbleSort {
    static void bubblesort(int arr[])
    {int n = arr.length;
        System.out.println(n);
        //first adjacent element
        for(int i=0;i<n-1;i++)
        {//getting second adjacent element
            for(int j=0;j<n-i-1;j++)
                //comparing the elements
                if(arr[j]>arr[j+1])
                {int temp=arr[j];
                    arr[j]=arr[j+1];
                    arr[j+1]=temp;
                }
        }
    }
    public static void main(String[] args)
    {
        int[] arr= {5,12,14,6,78,19,1,23,26,35,37,7,52,87,47};
        BubbleSort.bubblesort(arr);
        System.out.println("sorted array");
        System.out.println();
        for(int ele:arr)
        {System.out.print(ele+" ");}
    }
}




Ques 9: 
package com.corejava;
import java.util.Scanner;
public class AvgMarks {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter marks for Student 1: ");
        int a1 = scanner.nextInt(); int a2 = scanner.nextInt(); int a3 = scanner.nextInt();
        System.out.println("Enter marks for Student 2: ");
        int b1 = scanner.nextInt(); int b2 = scanner.nextInt(); int b3 = scanner.nextInt();
        System.out.println("Enter marks for Student 3: ");
        int c1 = scanner.nextInt(); int c2 = scanner.nextInt(); int c3 = scanner.nextInt();
        int s1 = a1+a2+a3; int s2 = b1+b2+b3; int s3 = c1+c2+c3;
        int totalMarks = s1 + s2 + s3;
        int avgMarks = (s1 + s2 + s3) / 3;
        System.out.println("Total marks scored by all students: " + totalMarks);
        System.out.println("Average marks scored by all students: " + avgMarks);
        System.out.println("Total marks scored by Student 1: " + s1);
        System.out.println("Total marks scored by Student 2: " + s2);
        System.out.println("Total marks scored by Student 3: " + s3);
        System.out.println("Average marks scored by Student 1: " + s1/3);
        System.out.println("Average marks scored by Student 2: " + s2/3);
        System.out.println("Average marks scored by Student 3: " + s3/3);
        System.out.println("Average marks scored in subject 1: " + (a1+b1+c1)/3);
        System.out.println("Average marks scored in subject 2: " + (a2+b2+c2)/3);
        System.out.println("Average marks scored in subject 3: " + (a3+b3+c3)/3);
    }
}





INTERMEDIATE OOPS

Ques 1 :
package com.Oop;
    public class Singletone {

        static Singletone st=new Singletone();
        private Singletone(){
            System.out.println("constructor will invoke only one object");
        }
        static Singletone getInstance()
        {
            return st;
        }
    }
    class Test
    {
        public static void main(String args[])
        {
            Singletone st1= Singletone.getInstance();
            Singletone st2= Singletone.getInstance();
            System.out.println(st1);
            System.out.println(st2);
        }
    }



Ques 2:
package com.Oop;
    class Employee {
        int employeeId;
        String employeeName;
        double salary;
        public Employee(int employeeId,String employeeName,double salary) {
            this.employeeId=employeeId;
            this.employeeName=employeeName;
            this.salary=salary;
        }
        public int setEmployeeId() {
            return employeeId;
        }
        public void setEmployeeName(String employeeName) {
            this.employeeName=employeeName;
        }
        public double getSalary() {
            return salary;
        }
        public void setSalary(double salary) {
            this.salary=salary;
        }
    }

package com.Oop;

import java.util.*;
public class Labour extends Employee{
    //public static final
    double overtime=0.5;
    public Labour(int employeeId,String employeeName,double salary){
        super(employeeId,employeeName,salary);
    }
    public double getSalary() {
        return salary+salary*overtime;
    }


}

public class Manager extends Employee{​​
public static final double incentive=0.5;
public Manager(int employeeId,String employeeName,double salary) {​​

super(employeeId,employeeName,salary);
}​​
public double getSalary() {​​
return salary+salary*incentive;
}​​

}​​




Ques 3:
import java.lang.String;



class saving {
    String name;
    int money;



   saving (String name, int money)
    {
        this.name = name;
        this.money = money;
    }



   public void fixeddeposit() {
        System.out.println("money deposited is " + money);
    }
    public int totalMoney() { return money; }
}
class current {
    String name;
    int moneyc;



   current(String name, int moneyc) {
        this.name = name;
        this.moneyc = moneyc;
    }
    public int cashcredit() {
        System.out.println("money credited is " + moneyc);



       return moneyc;
    }
    public int totalMoney() { return moneyc;}
}





class bank2 {
    public static void main(String[] args) {
        saving s=new saving( "SU" ,  1000);
        s.fixeddeposit();
        int p=s.totalMoney();
        current c=new current( "SV",  2000);
        c.cashcredit();
        int d=c.totalMoney();
        int y=p+d;
        System.out.println("Total money in the bank is"+y);
    }
}




Ques 4:

package com.Oop;
    abstract class Persistance {
        abstract void persist();
   }
    class Filepersistence extends Persistance{
        void persist()
        {
            System.out.println("data is stored in files");
        }
    }
    class DatabasePersistence extends Persistance{
        void persist()
        {
            System.out.println("Data is stored in Database");
        }
    }
    class Data
    {
        public static void main(String args[])
        {
            Filepersistence f=new Filepersistence();
            DatabasePersistence d=new DatabasePersistence();
            f.persist();
            d.persist();
        }
    }




Ques 5:

abstract class shape {

    abstract void draw();
}
class rectangle extends shape
{
    int height,width;
    rectangle(int h, int w) {
        this.height = h;
        this.width = w;
    }
    public void draw(){

        System.out.println("the rectangle is drawn");
    }
}
class line extends shape{
    int length;
    line(int length) {
        this.length=length; }
    public void draw()
    {
        System.out.println("the line is drawn");
    }
}

class cube extends shape{
    int s;
    cube(int s) {
        this.s=s;
    }
    public void draw()
    {
        System.out.println("the cube is drawn");
    }
}

class shapes
{
    public static void main(String[] args) {
        rectangle q=new rectangle(  5, 3);
        q.draw();
        cube k=new cube(5);
        k.draw();
        line l=new line( 5);
        l.draw();
    }
}



Ques 6 :
package com.Oop;
    abstract class Persistance {
        abstract void persist();

    }
    class Filepersistence extends Persistance{
        void persist()
        {
            System.out.println("data is stored in files");
        }
    }
    class DatabasePersistence extends Persistance{
        void persist()
        {
            System.out.println("Data is stored in Database");
        }
    }
    class Data
    {
        public static void main(String args[])
        {
            Filepersistence f=new Filepersistence();
            DatabasePersistence d=new DatabasePersistence();
            f.persist();
            d.persist();
        }
    }



Ques 7:
package com.company;
import java.util.Scanner;
import java.lang.String;
import static java.lang.System.*;
abstract class DessertItem
{
    abstract void getCost();
    abstract void addItem(int number,int addnumber);

}
class Candy extends DessertItem
{
    int cost;
    int number;
    int tax;
    Candy(int cost,int tax) {
        this.cost=cost;
        this.tax=tax;
    }
    void getCost()

    {
        cost=cost+tax;
        System.out.println("cost of cookie is "+cost+ "along with the tax "+tax);
    }
    void addItem(int number,int addnumber)
    {
        System.out.println("available candies are"+number+"candy's added"+addnumber);
    }
}
class Cookie extends DessertItem
{
    int cost;
    int number;
    int tax;
    Cookie(int cost,int tax)
    {
        this.cost=cost;
        this.tax=tax;
    }
    void getCost()

    {
        cost=cost+tax;
        System.out.println("cost of cookie is "+cost+ "along with the tax "+tax);
    }
    void addItem(int number,int addnumber)
    {

        System.out.println("available cookies are"+number+"cookie's added"+addnumber);
    }

}
class IceCream extends DessertItem
{
    int cost;
    int number;
    int tax;
    IceCream(int cost,int tax)
    {
        this.cost=cost;
        this.tax=tax;
    }
    void getCost()

    {
        cost=cost+tax;
        System.out.println("cost of icecream is "+cost+ "along with the tax "+tax);
    }
    void addItem(int number,int addnumber)
    {

        System.out.println("available icecreams are"+number+"icecreams's added"+addnumber);
    }
}
class Owner
{
    void addItem()
    {
        out.println("Adds items  to the list");
    }

}
class Customer {
    String[] a = new String[]{"icecream", "candie", "cookie"};

    void Order() {
        out.println("pick your order from the list");
        for (int i = 0; i < a.length; i++)
            out.println(a[i]);
    }
}
public class DesertShop {
    public static void main(String[] args) {
        String q="owner" ;
        String p="customer";
        Scanner s=new Scanner(in);
        out.println("enter your state");
        String State = s.next();
        Owner o=new Owner();
        Customer c=new Customer();
        Candy k=new Candy(60,1);
        Cookie k1=new Cookie(70,5);
        IceCream k2=new IceCream(60,2);
        if(State.equals(q))
        {
            k.addItem(100,50);
            k1.addItem(200,70);
            k2.addItem(300,100);
        }
        if(State.equals(p))
        {
            c.Order();
            k.getCost();
            k1.getCost();
            k2.getCost();
        }
    }
}





 ASSIGNMENT ON STRING, STRINGBUFFER & STRINGBuilder

ASSIGNMENT ON STRING CLASS

Ques 1:
package com.company;
public class Stringlen {
    public static void main(String[] args) {
        String s = "hello world";
        System.out.println(s.length());
    }
}


Ques 2:
package com.company;
import java.util.*;
public class Stingconac {
    public static void main(String[] args) {
        String a="Hello";
        String b=" how are you?";
        String c=a.concat(b);
        System.out.println(c);
    }
}


Ques 3:
package com.company;
import java.util.*;
public class Stringopre {
    public static void main(String[] args) {
    String a="java string pool refers to collection of strings which are stored in heap memory";
    System.out.println(a.toLowerCase());
    System.out.println(a.toUpperCase());
    System.out.println(a.replace('a','$'));
    String b="Java String Pool Refers To Collection Of Strings Which Are Stored In Heap Memory";
    System.out.println(a.equals(b));
    System.out.println(a.equalsIgnoreCase(b));
}
}

ASSIGNMENT ON STRING BUFFER
Ques 1:
package com.company;
class Stringbuffer{
    public static void main(String args[])
    {
        StringBuffer sb = new StringBuffer();
        System.out.println(sb.capacity());
        sb.append("Is a peer class of String");
        System.out.println(sb.capacity());
        sb.append("that provides much of");
        System.out.println(sb.capacity());
        sb.append("the functionality of strings");
        System.out.println(sb.capacity());
    }
}

Ques 2:
package com.company;
public class StringbuffIns {
    public static void main(String[] args) {
        String str = "It is used to ";
        StringBuffer s= new StringBuffer(str);
        System.out.println(str);
        s.insert(13,"insert text");
        System.out.println(s);
        System.out.println(s.toString());
    }
}


Ques 3:
package com.string;

public class Reverse {
    public static void main(String[] args) {
        StringBuffer sb=new StringBuffer("This method returns the reversed object on which it was called");
        System.out.println("Before reverse :"+sb);
        sb.reverse();
        System.out.println("After reverse :"+sb);
    }
}





ASSIGNMENT ON STRING BUILDER 
Ques 1
package com.company;
public class Stringbuiappen {
    public static void main(String args[]){
        StringBuilder s=new StringBuilder("String Buffer");
        System.out.println(s);
        s.append("is a peer class of String");
        System.out.println(s);
        s.append("that provides much of");
        System.out.println(s);
        s.append("the functionality of Strings");
        System.out.println(s);
    }
}



Ques 2:
package com.company;
public class StringBuiins {
    public static void main(String[] args) {
        String str = "It is used to ";
        StringBuilder s= new StringBuilder(str);
        System.out.println(str);
        s.insert(13,"insert text");
        System.out.println(s);
        System.out.println(s.toString());
    }
}



EXCEPTION HANDLING ASSIGNMENT
Ques 1:
package exception_handling;


public class HandlingException {
	public static void main(String args[]) {
		int a,b,res;

		  a = 10;
		  b = 0;
		  try {
			  res = a/b;
			  System.out.println("Result: "+res);

		  } catch(ArithmeticException e) {

			  throw new ArithmeticException("UnsupportedOperationException");
		  } 
	}
}



Ques 2:
package exception_handling;

public class SavingsAccount {
	double balance = 15000;
	long id;

	SavingsAccount(long id,double balance){
		this.balance = balance;
		this.id = id;
	}

	public double withdraw(double amt) {
		if(balance==0 || balance<amt) {
			throw new RuntimeException("InsuffficientBalanceException");
		}
		else if(amt<0) {
			throw new RuntimeException("IllegalBankTransactionException");
		}
		return amt;
	}

	public double deposit(double amt) {
		balance += amt;
		return balance;
	}
	public static void main(String args[]) {
		SavingsAccount s1 = new SavingsAccount(12703, 28000);
		double availBal = s1.deposit(5000);
		System.out.println("Available Balance after deposit: "+availBal);
		double withdrawAmt = s1.withdraw(35000);
		System.out.println("Available Balance after withdraw: "+ (availBal-withdrawAmt));
	}

}



Ques 3:

package exception_handling;

import java.util.Scanner;

public class TryCatch {
  public static void main(String argd[]) {
	  int x,y,res;
	  Scanner sc = new Scanner(System.in);
	  System.out.println("Enter the first number: ");
	  x = sc.nextInt();
	  System.out.println("Enter the second number: ");
	  y = sc.nextInt();
	  try {
		  res = x/y;
		  System.out.println("Result: "+res);
	  } catch(ArithmeticException e) {
		  System.out.println("Division by Zero!");
	  } finally {
		  sc.close();
	  }
  }
}



ASSIGNMENT ON GENERICS
Ques 1:
package com.assignment.generics;
import java.util.*;

public class EmployeeDemo {

  public static void main(String args[]) {
	  HashSet<Employee<Integer,String,Integer,String>> hashSet = new HashSet<>();
	  Employee<Integer,String,Integer,String> e1 =  new Employee<>(1201,"Gomathi",18000,"Cloud");
	  Employee<Integer,String,Integer,String> e2 =  new Employee<>(1202,"Swetha",16000,"SAP");

	  if(e1 instanceof Employee && e2 instanceof Employee) {
	  hashSet.add(e1);
	  hashSet.add(e2);
	  }

	  for(Employee<Integer,String,Integer,String> e: hashSet) {
		  e.displayDetails();
	  }

  }


}

package com.assignment.generics;

public class Employee<T1, T2, T3, T4> {
	private T1 id;
	private T2 name;
	private T3 salary;
	private T4 dept;

	Employee(T1 id, T2 name, T3 salary, T4 dept) {
		this.id = id;
		this.name = name;
		this.salary = salary;
		this.dept = dept;
	}

   public void displayDetails() {
	   System.out.println("Employee Id: "+this.id);
	   System.out.println("Employee Name: "+this.name);
	   System.out.println("Employee Salary: "+this.salary);
	   System.out.println("Employee Department: "+this.dept);
	   System.out.println();
   }
}



Ques 2:
package com.assignment.generics;

import java.util.*;

public class RandomValuesDemo {
	public static void main(String args[]) {
		HashMap<Integer, Double> hashMap = new HashMap<>();

		Integer[] keys = { 17, 23, 89, 42, 38, 5, 120, 225, 467, 840 };
		Double[] values = { 2.5, 67.84, 178.90, 324.783, 671.2, 76.4, 29.45, 56.42, 982.517, 45.31 };

		RandomValues<Integer, Double> map = new RandomValues<>(keys, values);

		for (int i = 0; i < 10; i++) {
			hashMap.put(map.keys[i], map.values[i]);
		}

		for (Map.Entry<Integer, Double> m : hashMap.entrySet()) {
			System.out.println(m.getKey() + " : " + m.getValue());
		}
	}
}




Ques 3:

package com.assignment.generics;

public class Swap {

	public <T> void swap(T[] arr, int i, int j) {
		T temp = arr[i];
		arr[i] = arr[j];
		arr[j] = temp;
	}

	public static void main(String args[]) {
		Swap s = new Swap();
		Integer[] arr = {1,2,3,4,5};
		System.out.println("Before Exchanging Positions:");
		for(int i: arr) {
			System.out.print(i+ " ");
		}
		System.out.println();
		System.out.println("After Exchanging Positions:");
		s.<Integer>swap(arr, 0,3);
		for(int i: arr) {
			System.out.print(i+ " ");
		}
		String[] array = {"Hi", "Hello"};
		System.out.println("Before Exchanging Positions:");
		for(String i: array) {
			System.out.print(i+ " ");
		}
		System.out.println();
		System.out.println("After Exchanging Positions:");
		s.swap(array,0,1);
		for(String i: array) {
			System.out.print(i+ " ");
		}

	}

}



Ques 4:

package com.assignment.generics;

import java.util.Date;

public class PairDemo {

	public static void main(String[] args) {
	  Pair<String,String> myobj1 = new Pair<>();
	  myobj1.setKey("1");
	  myobj1.setValue("Hello");

	  System.out.println("Key: "+myobj1.getKey()+", Value:"+myobj1.getValue());

	  Pair<String, Date> myobj2 = new Pair<>();
	  myobj2.setKey("Today is");
	  myobj2.setValue(new java.util.Date());

	  System.out.println("Key: "+myobj2.getKey()+", Value:"+myobj2.getValue().toString());
	}

}





ASSIGNMENT ON COLLECTIONS

Ques 1
import java.lang.String;
import java.util.*;
class Contact
{
    String name;
    String email;
    char gender;
    Contact( String name, String email, char gender)
    {
        this.name = name;
        this.email = email;
        this.gender = gender;
    }

    @Override
    public String toString() {
        return "Contact{" +
                "name='" + name + '\'' +
                ", email='" + email + '\'' +
                ", gender=" + gender +
                '}';
    }
}
class number
{
    int phno;
    number(int phno)
    {
        this.phno=phno;
    }

    @Override
    public String toString() {
        return "number{" +
                "phno=" + phno +
                '}';
    }
}
class Sortbyphno implements Comparator
{
    public int compare(Object str1, Object str2)
    {
        String i1=str1.toString();
        String i2= str2.toString();
        return i2.compareTo(i1);
    }
}
public class TreeExample
{
    public static void main(String[] args)
    {
        number n1=new number(647528916);
        number n2=new number(647528919);
        number n3=new number(647528915);
        Contact c1=new Contact("a","agmail.com",'f');
        Contact c2=new Contact("b","bgmail.com",'f');
        Contact c3=new Contact("c","cgmail.com",'f');
        TreeMap<number,Contact> t1 = new TreeMap<number,Contact>(new Sortbyphno());
        t1.put(n1,c1);
        t1.put(n2,c2);
        t1.put(n3,c3);
        System.out.println(t1);
        Set s1=t1.keySet();
        System.out.println(s1);
        Collection s2=t1.values();
        System.out.println(s2);
        Set s3=t1.entrySet();
        System.out.println(s3);
    }
}



Ques 2:
import java.lang.*;
import java.util.*;

public class Product {
    public static void main(String[] args)
        {
         HashSet<String> obj=new HashSet<>();
         obj.add("Cups");
         obj.add("chairs");
         obj.add("pens");
         obj.add("table");
         obj.add("Books");
         obj.add("papers");
         obj.add("flank");
         obj.add("breshes");
         obj.add("colors");
         obj.add("mobiles");
         System.out.println(obj);
        }
}



Ques 3:
import java.lang.*;
import java.util.*;
class Employee1
{
    Integer id;
    String name;
    String department;
    int salary;
    Employee1(Integer id,String name,String department,int salary)
    {
        this.id=id;
        this.name=name;
        this.department=department;
        this.salary=salary;
    }
@Override
public String toString()
{
     return "Treeset{" +
             "id=" + id +", name='" + name + '\'' +
             ", department='" + department + '\'' +
             ", salary=" + salary +
             '}';
}
}
class Sortbyid implements Comparator<Employee1>
{
    public int compare(Employee1 a, Employee1 b)

 {
     return a.id - b.id;
}
}
class Sortbysalary implements Comparator<Employee1>

{
    public int compare(Employee1 a, Employee1 b)

 {
     return a.salary - b.salary;
}
}
class Sortbyname implements Comparator
{
    public int compare(Object str1, Object str2)
    {
        String i1=str1.toString();
        String i2= str2.toString();
        return i2.compareTo(i1);
    }
}
class Sortbydepartment implements Comparator
{
    public int compare(Object str1, Object str2)
    {
        String i1=str1.toString();
        String i2= str2.toString();
        return i1.compareTo(i2);
    }

}
class TreeSetExample {
    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        Employee1 t1 = new Employee1(1, "a", "B", 10000);
        Employee1 t2 = new Employee1(2, "b", "c", 20000);
        Employee1 t3 = new Employee1(3, "c", "a", 30000);
        Employee1 t4 = new Employee1(4, "d", "j", 40000);
        Employee1 t5 = new Employee1(11, "e", "k", 50000);
        Employee1 t6 = new Employee1(6, "f", "l", 60000);
        Employee1 t7 = new Employee1(7, "g", "m", 70000);
        Employee1 t8 = new Employee1(8, "h", "n", 80000);
        Employee1 t9 = new Employee1(9, "i", "o", 1000);
        Employee1 t10 = new Employee1(10, "j", "p", 100000);
        System.out.println("choose 1 for name choose 2 for department choose 3 for salary choose 4 for id");
        int choose = s.nextInt();
        switch (choose) {
            case 1:
                TreeSet<Employee1> s1 = new TreeSet<>(new Sortbyid());
                s1.add(t1);
                s1.add(t2);
                s1.add(t3);
                s1.add(t4);
                s1.add(t5);
                s1.add(t6);
                s1.add(t7);
                s1.add(t8);
                s1.add(t9);
                s1.add(t10);
                System.out.println(s1);
                break;
            case 2:
                TreeSet<Employee1> s2 = new TreeSet<>(new Sortbysalary());
                s2.add(t1);
                s2.add(t2);
                s2.add(t3);
                s2.add(t4);
                s2.add(t5);
                s2.add(t6);
                s2.add(t7);
                s2.add(t8);
                s2.add(t9);
                s2.add(t10);
                System.out.println(s2);
                break;
            case 3:
                TreeSet<Employee1> s3 = new TreeSet<Employee1>(new Sortbyname());
                s3.add(t1);
                s3.add(t2);
                s3.add(t3);
                s3.add(t4);
                s3.add(t5);
                s3.add(t6);
                s3.add(t7);
                s3.add(t8);
                s3.add(t9);
                s3.add(t10);
                System.out.println(s3);
                break;
            case 4:
                TreeSet<Employee1> s4 = new TreeSet<Employee1>(new Sortbydepartment());
                s4.add(t1);
                s4.add(t2);
                s4.add(t3);
                s4.add(t4);
                s4.add(t5);
                s4.add(t6);
                s4.add(t7);
                s4.add(t8);
                s4.add(t9);
                s4.add(t10);
                System.out.println(s4);
                break;
        }
    }
}



Ques 4:

import java.lang.*;
import java.util.*;
class Date
{  Integer date;
    Integer Month;
    Integer year;
    public Date(Integer d,Integer Month,Integer year)
    {
        this.date=d;
        this.Month=Month;
        this.year=year;
    }

    @Override
    public String toString() {
        return date+"-"+Month+"-"+year;
    }
}
class LinkedListExample {
    public static void main(String args[])
    {
        LinkedList<Date> list=new LinkedList<>();
        Date d1=new Date(3,8,2001);
        Date d2=new Date(10,11,2010);
        Date d3=new Date(28,12,2011);
        Date d4=new Date(05,11,2016);
        Date d5=new Date(25,5,1900);
        list.add(d1);
        list.add(d2);
        list.add(d3);
        list.add(d4);
        list.add(d5);
        System.out.println(list);
        Iterator<Date> itr=list.iterator();
        while(itr.hasNext())
        {
            Date d=(Date)itr.next();
            Integer date=d.date;
            Integer month=d.Month;
            Integer year=d.year;
            if(year%400==0)
            {
                System.out.println("The date of birth is "+date+"-"+month+"-"+year+" is leaf year");
            }
            else if(year%100==0)
            {
                System.out.println("The date of birth is "+date+"-"+month+"-"+year+" is not leaf year");
            }
            else if(year%4==0)
            {
                System.out.println("The date of birth is "+date+"-"+month+"-"+year+" is leaf year");
            }
            else {
                System.out.println("The date of birth is "+date+"-"+month+"-"+year+" is not leaf year");
            }
        }

    }
}



ANNOTATIONS ON JAVA
Ques 1 :
package com.company;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.METHOD)
    @interface Test
    {

    }
    class AnnotationTest {
        @Test
        public int testcase()
        {
            int a=1120;
        return a;
        }
        public static void main(String[] agrs)
        {
            AnnotationTest t = new AnnotationTest();
            System.out.println(t.testcase());
        }
    }




Ques 2:
    import java.lang.annotation.Annotation;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@interface info{​​
int authorId() default 123;
String Authorname() default "keerthana";
String developersupervisor() default "mandra";
String date() default "5/5/22";
String Time() default "6.00 PM";
int version() default 7;
}​​


@info
class developers{​​
int authorId;
String Authorname;
String developersupervisor;
String date;
String Time;
int version;
}​​
public class secondquestion {​​
public static void main(String[] args) {​​
developers obj=new developers();
Class n=obj.getClass();
Annotation anno=n.getAnnotation(info.class);
info k=(info)anno;
System.out.println(k.authorId());
System.out.println(k.Authorname());
System.out.println(k.date());
System.out.println(k.developersupervisor());
System.out.println(k.Time());
System.out.println(k.version());
}​​
}​​



Ques 3:
package com.company;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.lang.reflect.Method;
import java.lang.reflect.*;
import java.util.ArrayList;

@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)

@interface Execute {
    int Sequence();
}
class MyClass {
    @Execute(Sequence = 2)
    public void myMethod1() {
        System.out.println("Method 1");
    }

    @Execute(Sequence = 1)
    public void myMethod2() {
        System.out.println("Method 2");

    }

    @Execute(Sequence = 3)
    public void myMethod3() {
        System.out.println("Method 3");
    }
}




LAMBDA EXPRESSION ASSIGNMENTS

QUES 1:
@FunctionalInterface
interface Arithmetic
{
    int operations(int a,int b);
}
public class LambdaQue1
{
  public static void main(String args[])
  {
      Arithmetic addition = (a, b) -> (a + b);
      System.out.println("Addition -> " + addition.operations(5,10));
      Arithmetic subtraction = (a, b) -> (a - b);
      System.out.println("Subtraction -> " + subtraction.operations(5,10));
      Arithmetic multiplication = (a, b) -> (a * b);
      System.out.println("Multiplication -> " + multiplication.operations(5,10));
      Arithmetic division = (a, b) -> (a / b);
      System.out.println("Division -> " + division.operations(5,10));

  }
}



QUES 2:
package com.company;
interface Orders
{
    void criteria(int price);
}
public class LambdaQue2
{
    public static void main(String args[])
    {
        Orders lamdaexpression=(int a)->
        {
            if(a>10000)
            {
                System.out.println("order price is more than 10000");
                System.out.println("Completed");
            }
            else
            {
                System.out.println("not accepted");
            }
        };
        lamdaexpression.criteria(20000);
    }
}



Ques 3:
import java.util.Date;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Supplier;
interface Inter
{
    public void test(int n);
}
public class LambdaQue3
{
    public static void main(String args[])
    {
        Predicate<Integer> P = n -> n%2 == 0;
        System.out.println(P.test(10));
        Function<Integer,Integer> F = n -> n*n;
        System.out.println(F.apply(6));
        Supplier<Date> S = () -> new Date();
        System.out.println(S.get());
        Consumer<String> C = (string) -> System.out.println(4);
        C.accept("paru");
    }
}



Ques 4:
mport jdk.swing.interop.SwingInterOpUtils;
import java.sql.SQLOutput;
import java.util.ArrayList;
import java.util.Arrays;
public class LambdaQ4 {
    public static void main(String[] args) {
        ArrayList<String> list1 = new ArrayList<String>(Arrays.asList("hello", "world", "good", "morning", "zoom"));
        System.out.println(list1);
        for (String word : list1)
            System.out.println(word);
        System.out.println("the words with the even number length:");
        list1.removeIf(word ->((word.length()%2 )!= 0));
        for (String word : list1){
            System.out.println(word);
        }
    }
}



Ques 5:
package com.lambda;
import java.util.Arrays;
import java.util.List;
import java.util.function.Consumer;
import java.util.stream.Stream;
public class firstletter {
    List<String> list = Arrays.asList("alpha", "bravo", "charlie", "delta", "echo", "foxtrot");
    public static void main(String[] args) {
        firstletter firstletter = new firstletter();
        processWords(firstletter.list);
    }

    public static String processWords(List<String> list) {
        StringBuilder words = new StringBuilder();
        Consumer<String> consumer = p-> words.append(p.charAt(0));
        list.stream().forEach(consumer);
        System.out.println(words);
        return  words.toString();
    }
}



Ques 6:
package com.lambda;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.function.Consumer;
public class UpperCase {
    public static void main(String[] args) {
        List<String> list = Arrays.asList("alpha", "bravo", "charlie", "delta", "echo", "foxtrot");
        UpperCase Letter = new UpperCase();
        System.out.println(Letter.convertToUpperCase(list));
    }
    public List<String> convertToUpperCase(List<String> list) {
        List<String> ToUpper = new ArrayList<>();
        Consumer<String> consumer = (str)->ToUpper.add(str.toUpperCase());
        list.stream()
                .forEach(consumer);
        return  ToUpper;
    }
}


Ques 7:
package com.lambda;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;
public class KeyValues{
    public static void main(String[] args) {
        HashMap<String,Integer> map = new HashMap<>();
        map.put("a",4);
        map.put("b",2);
        map.put("c",3);
        KeyValues KeyValues = new KeyValues();
        KeyValues.convertKeyValueToString(map);
    }
    public String convertKeyValueToString(HashMap<String, Integer> map) {

        StringBuilder str = new StringBuilder();
        Consumer<Map.Entry> consumer=(p)->str.append(p.getKey()).append(p.getValue());
        Set set  = map.entrySet();
        set.stream()
                .forEach(consumer);
        System.out.println(str);
        return str.toString();
    }
}


